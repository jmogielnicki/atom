var recast = require('recast');

var parser = require('acorn-jsx');
var utils = require('./utils');

const log = console.log.bind(console);

const getName = utils.getName;
var opts = require('../parsers/parserOptions')['.js'];

const code = require('fs').readFileSync('mocks/scoper2.js', 'utf8');
var ast = parser.parse(code, opts);

let indent = 0;

let scopes = {
    byFunction: [],
    byBlock: [],
    byClass: [],
    byObject: [],
    byProperty: [],
    byVariable: [],
    //byProperty: [],
    global: {
        items: Object.create(null)
    }
};


function gatherScope(path, $scopes, traverse) {
    const parent = path.parent.node;

    $scopes.indent = ($scopes.indent || 0) + 1;

    let currScope;

    if (parent.type == 'FunctionExpression' || parent.type == 'FunctionDeclaration') {
        currScope = getCurrent(scopes.byFunction);
    } else {
        currScope = {
            name: getName(path) || getName(path.parent),
            path,
            indent: $scopes.indent,
            items: Object.create(getCurrent(scopes.byBlock).items)
        };
    }
    $scopes.push(currScope);
    traverse && traverse(currScope);
    $scopes.pop();
    $scopes.indent--;
}

function getCurrent($scopes) {
    return $scopes[$scopes.length - 1] || scopes.global;
}

function makeIndent(scopes) {
    return new Array(scopes.indent*4).join(' ');
}

function visitFunction (path) {
    const $scopes = scopes.byFunction;
    gatherScope.call(this, path, $scopes, () => {
        log(makeIndent($scopes), getName(path) + '() {')
        this.traverse(path);
        const currScope = getCurrent(scopes.byFunction);
        log(
            'FUNC', getCurrent(scopes.byFunction).name

        );

        for (let a in currScope.items) {
            if (Object.prototype.hasOwnProperty.call(currScope.items, a)) {
                log('***',a)
            } else {
                log('...' + a);
            }
        }

        log(makeIndent($scopes),getName(path) + '////()')
    });
}

recast.visit(ast, {
    visitFunctionExpression: visitFunction,
    visitFunctionDeclaration(path) {
        const name = getName(path);
        //define(scopes.byBlock, name, 42);
        getCurrent(scopes.byBlock).items[name] = name;
        return visitFunction.call(this, path);
    },
    visitClassDeclaration(path) {
        gatherScope(path, scopes.byClass, () => {
            this.traverse(path);
            console.log(
                getCurrent(scopes.byClass).name,
                getCurrent(scopes.byClass).items
            );
        });
    },
    visitMethodDefinition(path) {
        const name = getName(path);
        getCurrent(scopes.byClass).items[name] = name;
        this.traverse(path);
    },
    visitBlockStatement(path) {
        gatherScope(path, scopes.byBlock, () => this.traverse(path))
    },
    visitJSXOpeningElement(path) {
        const name = getName(path);
        log('xxxx----------------------xxxx',name, getCurrent(scopes.byBlock).items[name]);

        this.traverse(path);
    },
    // visitJSXElement(path) {
    //     const name = path.node.openingElement;
    //     this.traverse(path);
    // },
    visitVariableDeclaration(path) {
        let indent;
        let $scopes;
        const name = getName(path);
        if (path.node.kind == 'var') {
            $scopes = scopes.byFunction;

        } else {
            $scopes = scopes.byBlock;
        }
        getCurrent($scopes).items[name] = name;
        indent = ($scopes[$scopes.length - 1] || {indent:0}).indent;

        log(new Array((indent)*4).join(' '), name)


        // const currObject = getCurrent(scopes.byObject);
        gatherScope(path, scopes.byVariable, (scope) => {
            log("<li>",'<strong>V:' + scope.name + '</strong>');
            this.traverse(path);
            log('/V</li>', scope.items);
            //currObject.items[name] = scope.items;
        });

        //
        try {
            log('<h2>',getCurrent($scopes).items.obj.subobject,'</h2');
        } catch (e) {
            log("@@@@")
        }

    },
    visitObjectExpression(path) {
        console.log("OBJ< CUR", getCurrent(scopes.byObject).name);
        const currProperty = getCurrent(scopes.byProperty);
        if (currProperty.name) {
            //log('<span style="color:green">', getCurrent(scopes.byProperty).name, '</span>');
            currProperty.items
        }


        gatherScope(path, scopes.byObject, (scope) => {
            log("<ul>", '<span style="color:red">'+scope.name+'</span>', scope.items)
            this.traverse(path);
            log("OBIEKCIK", scope.name, scope.items, '</ul>')
            currProperty.items = scope.items;

            if (!currProperty.name)
                getCurrent(scopes.byVariable).items[scope.name] = scope.items;
        })
    },
    visitProperty(path) {
        const name = getName(path);
        log(name);
        const currObject = getCurrent(scopes.byObject);
        gatherScope(path, scopes.byProperty, (scope) => {
            log("<li>",'<strong>' + scope.name + '</strong>');
            this.traverse(path);
            log('</li>');
            currObject.items[name] = scope.items;
        });

    }
});

console.log("GLOBAL", scopes.global)
